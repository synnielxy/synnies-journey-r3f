/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef, useEffect, useMemo } from "react";

import { usePlay } from "../contexts/Play";

const BUBBLE_SIZE = 1.005;

export function Airplane({ planeHeightRef, sceneOpacity, ...props }) {
  const { nodes, materials } = useGLTF("./models/airplane/model.glb");
  const { velocity } = usePlay();
  const groupRef = useRef();
  const planeGroupRef = useRef();

  const spheres = useMemo(() => {
    return new Array(10).fill().map((element, index) => ({
      position: [-1 - Math.random(), -0.4 + Math.random(), Math.random()],
    }))
  }, [])

  useEffect(() => {
    groupRef.current.children.forEach((mesh, index) => {
      mesh.material.opacity = 0;
    });
  }, []);

  const helix = useRef();
  const planeRotation = useRef();
  let time = 0;

  useFrame((_state, delta) => {
    time += delta;
    helix.current.rotation.x += delta * (velocity * 5 + 0.1) * 20;
    planeGroupRef.current.traverse((child) => {
      if (child.isMesh) {
        child.material.opacity = sceneOpacity.current;
      }
    });

    groupRef.current.children.forEach((mesh, index) => {
      mesh.position.x -= delta * 0.1 + delta * velocity * 2;
      mesh.position.y += delta * 0.1 + delta * velocity * 0.7;
      mesh.scale.x += delta * BUBBLE_SIZE;
      mesh.scale.y += delta * BUBBLE_SIZE;
      mesh.scale.z += delta * BUBBLE_SIZE;
      if (mesh.position.x < -2) {
        mesh.position.x = - 1. - Math.random();
        mesh.position.y = -0.4 + Math.random();
        mesh.scale.set(1, 1, 1);
      }

      if (sceneOpacity.current >= 0.95) {
        if (mesh.material) {
          mesh.material.opacity = Math.sin(mesh.position.y) * 0.5 + 0.5;
        }
      } else {
        mesh.material.opacity = sceneOpacity.current;
      }
    });
  });

  return (
    <group
      {...props}
      dispose={null}
      position-y={planeHeightRef.current.value - 0.1}
      ref={planeRotation}
    >
      <group ref={planeGroupRef}>
        <mesh geometry={nodes.PUSHILIN_Plane_Circle000.geometry}>
          <meshStandardMaterial color="white" transparent />
        </mesh>
        <mesh
          ref={helix}
          geometry={nodes.PUSHILIN_Plane_Helix.geometry}
          material={materials.plane}
          position={[1.09, 0.23, 0]}
        >
          <meshStandardMaterial color="white" transparent />
        </mesh>
      </group>

      <group ref={groupRef}>
        {spheres.map((props, i) => (
          <mesh key={i} {...props}>
            <sphereGeometry args={[0.05, 32, 32]} />
            <meshBasicMaterial transparent opacity={1} color="#ffffff" />
          </mesh>
        ))}
      </group>

    </group>
  );
}

useGLTF.preload("./models/airplane/model.glb");